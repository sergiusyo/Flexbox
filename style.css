
* {
	box-sizing: border-box; /*!при установке этого свойства у нас учитываются*/
	/*!все размеры и отступы.*/
}

body {
	font-family: 'Source Sans Pro', sans-serif;
	color: var(--mainFont);
	background-color: #232228;
}


.container {
	display: flex;
	/* align-items: center; */
	/*!inline-flex - то же самое, что и в флекс,/* 
	/*!за исключением того, что элементы не занимают всю ширину/*
	/*!блока, а ведут себя как инлайновые*/
	border: 1px solid #6c38cc;
	/* flex-direction: row; !задает направление оси распожения флеекс-элементов! */
	/*!по умолчанию FD: row, т.е. строка*/
	/*!flex-flow: row wrap; !укороченная запись/*
	/*justify-content: /*!center left right - с ними всё понятно;/*
	/*!flex-start, flex-end - это свойство ставит элемены в начало или конец флекс-контейнера/*
	/*!start, end - просто более современная запись*/
	/*!между flex-start и left есть большое отличие: какое бы направление
	не было у флекс-контейнера (при row-reverse), элемент прибьется слева или справа*/
	/*!justify-content: space-between - расставит элементы НА ОДИНАКОВОЕ
	/*!расстояние друг от друга. Левый и правый элементы будут прижаты к Л.и П. частям контейнера*/
	/*!justify-content: space-around - то же самое, но ЧТОБЫ У КАЖДОО ИЗ ЭЛЕМЕНТОВ БЫЛО
	/*!ОДИНАКОВОЕ РАССТОЯНИЕ. Т.е. каждый элемент д/б окружен идентичными расстояниями. "Воздух" между
	/*!элементами будет всегда идентичным. Это удобно, если между элементами проходит разделительная линия*/
	/*!justify-content: space-evenly - в отл.от space-between расстояние между элементами и между контейнера будет равным!*/
	/*!align-items - располагает элементы по вертикали (вспомогательной оси). Нужно указывать высоту. 
	/*!работает с одной конкретной строкой.*/
	/*!align-items: baseline - выстраивает элементы по базовой линии текста.*/
	/*!align-content - весь контент ужимается к центру. А по умолчанию у контента значение stretch, т.е. он растягивается*/
	/*!align-self - применяется к конкретному элементу*/
	/*!auto margin - */
	/*!при указании margin-right: auto - блок раздвинется вправо, оставив свободное пространство*/
	/*!flex: 1 - сокращенное название других неск.свойств: flex-grow, flex-shrink, flex-basis. 
	/*!У нас 10 элементов. Значит каждый из них будет занимать 1/10 часть. При указании свойства flex: 1
	/*!какому-то конкретному элементу (item-1) этот первый элемент ЗАНИМАЕТ ВСЁ ПРОСТРАНСТВО, а остальные
	/*!просто прибиваются вправо. Таким образом, с помощью этого свойства мы сможем в дальнейшем задавать
	/*!какие-либо пропорции необходимым элементам. НО! Когда этому элементу перестанет хватать
	/*!необходимого пространства, он начнет сжиматься. как и все остальные.*/
}


.item {
	background: #232228;
	border: 1px solid #6c38cc;
	text-align: center;
	padding: 10px;
	width: calc(100% / 3);
	color: white;
	flex-basis: 300px; /*!элемент занимает свою БАЗОВУЮ ШИРИНУ. Даже если есть пространство справа,
	/*!выделится только базовая ширина.*/
	/*!flex-grow - показывает, сколько частей свободного пространства может занять тот или иной элемент.
	/*!*/
	flex-grow: 1; /*!элементы встанут ровно, и каждый элемент займет в освободившемся пространстве ровно единицу
	/*!1/2 часть, т.к. их 2. Если указывается 2 неравных параметра (flex-grow: 1 и flex-grow: 5), то
	/*!соотв-но элементы займут 1 и 5 частей из 6-ти.*/
	/*!flex-shrink - по умолчанию 1. определяет фактор сжатия flex-элемента.
	/*!Flex-элементы будут заполнять контейнер в зависимости от значения flex-shrink, 
	/*!когда стандартная ширина flex-элементов шире, чем flex-контейнер.
	/*!flex-grow, flex-shrink ведут себя в пределах ОДНОЙ СТРОКИ!*/
	/*!flex-shrink используется вместе со свойствами flex flex-grow и flex-basis./*
	/*!Обычно определяется с помощью сокращения flex.*/
	/*!flex: 1 1 500px - flex-grow: 1 и flex-shrink: 1 и flex-basis: 500px - короткая запись!!!*/
}


.item-2 {
	flex-shrink: 0;
}

